import streamlit as st
import ollama
import os
import json
import time
from pydantic import BaseModel
from typing import Literal, Optional

class ReasoningStep(BaseModel):
    title: str
    content: str
    next_action: Literal['continue', 'final_answer']

class FinalAnswer(BaseModel):
    title: str
    content: str

def make_api_call(messages, max_tokens, is_final_answer=False):
    invalid_format_message = {
        "role": "system",
        "content": "Your previous response did not match the required schema. Please ensure your response follows the exact structure specified."
    }
    
    schema = FinalAnswer.model_json_schema() if is_final_answer else ReasoningStep.model_json_schema()
    
    for attempt in range(3):
        try:
            response = ollama.chat(
                model="qwq",
                messages=messages,
                options={"temperature": 0.2, "max_length": max_tokens},
                format=schema
            )
            
            try:
                if is_final_answer:
                    validated_response = FinalAnswer.model_validate_json(response.message.content)
                else:
                    validated_response = ReasoningStep.model_validate_json(response.message.content)
                
                print(f"Valid response on attempt {attempt + 1}")
                return validated_response.model_dump()
                
            except Exception as validation_error:
                print(f"Validation error on attempt {attempt + 1}: {str(validation_error)}")
                if attempt < 2:
                    messages.append(invalid_format_message)
                    continue
                    
            if attempt == 2:
                error_message = "Failed to generate properly formatted response after 3 attempts"
                if is_final_answer:
                    return FinalAnswer(
                        title="Error",
                        content=error_message
                    ).model_dump()
                else:
                    return ReasoningStep(
                        title="Error",
                        content=error_message,
                        next_action="final_answer"
                    ).model_dump()
                    
        except Exception as e:
            print(f"API call error on attempt {attempt + 1}: {str(e)}")
            if attempt == 2:
                error_message = f"Failed to make API call after 3 attempts. Error: {str(e)}"
                if is_final_answer:
                    return FinalAnswer(
                        title="Error",
                        content=error_message
                    ).model_dump()
                else:
                    return ReasoningStep(
                        title="Error",
                        content=error_message,
                        next_action="final_answer"
                    ).model_dump()
            time.sleep(1)

def generate_response(prompt):
    messages = [
        {"role": "system", "content": """You are an expert AI assistant that explains your reasoning step by step. For each step, provide a title that describes what you're doing in that step, along with the content. Decide if you need another step or if you're ready to give the final answer. Your response must match the provided schema structure.

USE AS MANY REASONING STEPS AS POSSIBLE. AT LEAST 3. BE AWARE OF YOUR LIMITATIONS AS AN LLM AND WHAT YOU CAN AND CANNOT DO. IN YOUR REASONING, INCLUDE EXPLORATION OF ALTERNATIVE ANSWERS. CONSIDER YOU MAY BE WRONG, AND IF YOU ARE WRONG IN YOUR REASONING, WHERE IT WOULD BE. FULLY TEST ALL OTHER POSSIBILITIES. YOU CAN BE WRONG. WHEN YOU SAY YOU ARE RE-EXAMINING, ACTUALLY RE-EXAMINE, AND USE ANOTHER APPROACH TO DO SO. DO NOT JUST SAY YOU ARE RE-EXAMINING. USE AT LEAST 3 METHODS TO DERIVE THE ANSWER. USE BEST PRACTICES."""},
        {"role": "user", "content": prompt},
        {"role": "assistant", "content": "Thank you! I will now think step by step following my instructions, starting at the beginning after decomposing the problem."}
    ]
    
    steps = []
    step_count = 1
    total_thinking_time = 0
    
    while True:
        start_time = time.time()
        step_data = make_api_call(messages, 300)
        end_time = time.time()
        thinking_time = end_time - start_time
        total_thinking_time += thinking_time
        
        if 'Error' in step_data['title']:
            step_title = f"Step {step_count}: Error"
            step_content = f"ðŸš¨ {step_data['content']}"
        else:
            step_title = f"Step {step_count}: {step_data['title']}"
            step_content = step_data['content']
        
        steps.append((step_title, step_content, thinking_time))
        messages.append({"role": "assistant", "content": json.dumps(step_data)})
        
        if step_data.get('next_action') == 'final_answer' or step_count > 25:
            break
            
        step_count += 1
        yield steps, None

    messages.append({"role": "user", "content": "Please provide the final answer based on your reasoning above."})
    
    start_time = time.time()
    final_data = make_api_call(messages, 4000, is_final_answer=True)
    end_time = time.time()
    thinking_time = end_time - start_time
    total_thinking_time += thinking_time
    
    if 'Error' in final_data['title']:
        final_content = f"ðŸš¨ {final_data['content']}"
    else:
        final_content = final_data['content']
    
    steps.append(("Final Answer", final_content, thinking_time))
    yield steps, total_thinking_time

def main():
    st.set_page_config(page_title="g1 prototype", page_icon="ðŸ§ ", layout="wide")
    
    st.title("Reasoning Chain Chat")
    
    st.markdown("""This is a prototype, derived of [this](https://github.com/bklieger-groq). Improved error handling and processing using structured outputs """)

    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Chat input
    if prompt := st.chat_input("What would you like to know?"):
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})

        # Display assistant response
        with st.chat_message("assistant"):
            response_container = st.container()
            
            with response_container:
                steps_container = st.empty()
                final_answer_container = st.empty()
                time_container = st.empty()
                
                all_steps_content = ""
                
                for steps, total_thinking_time in generate_response(prompt):
                    # Collect all steps except final answer
                    non_final_steps = [step for step in steps if not step[0].startswith("Final Answer")]
                    final_step = next((step for step in steps if step[0].startswith("Final Answer")), None)
                    
                    if non_final_steps:
                        with steps_container.expander("Reasoning Steps", expanded=True):
                            for i, (title, content, _) in enumerate(non_final_steps):
                                st.markdown(f"### {title}")
                                st.markdown(content)
                                if i < len(non_final_steps) - 1:  # Don't add divider after last step
                                    st.divider()
                    
                    if final_step:
                        final_answer_container.markdown(f"### {final_step[0]}")
                        final_answer_container.markdown(final_step[1])
                        
                    if total_thinking_time is not None:
                        time_container.markdown(f"**Total thinking time: {total_thinking_time:.2f} seconds**")
                        
                        # Add the final response to chat history
                        if final_step:
                            full_response = f"{final_step[1]}\n\n**Total thinking time: {total_thinking_time:.2f} seconds**"
                            st.session_state.messages.append({"role": "assistant", "content": full_response})

if __name__ == "__main__":
    main()
